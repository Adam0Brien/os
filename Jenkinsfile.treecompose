def TIMER = "H/30 * * * *"
def NODE = "atomic-jslave-autobrew"
def DOCKER_IMG = "quay.io/cgwalters/coreos-assembler"
def DOCKER_ARGS = "--net=host -v /srv:/srv --privileged"

// this var conveniently refers to a location on the server as well as the
// local dir we sync to/from
def repo = "/srv/rhcos/output/repo"

def manifest = "host.yaml"
def ref = "openshift/3.10/x86_64/os";

node(NODE) {
    docker.image(DOCKER_IMG).pull()

    checkout scm
    utils = load("pipeline-utils.groovy")
    utils.define_properties(TIMER)

    docker.image(DOCKER_IMG).inside(DOCKER_ARGS) {
        stage("Sync In") {
            withCredentials([
                string(credentialsId: params.ARTIFACT_SERVER, variable: 'ARTIFACT_SERVER'),
                sshUserPrivateKey(credentialsId: params.ARTIFACT_SSH_CREDS_ID, keyFileVariable: 'KEY_FILE'),
            ]) {
                sh """
                    # a few idempotent commands for bootstrapping
                    mkdir -p ${repo}
                    ostree init --repo=${repo} --mode=archive
                    /usr/app/ostree-releng-scripts/rsync-repos \
                    --src ${ARTIFACT_SERVER}:${repo}/ --dest=${repo} \
                    --rsync-opt=--stats --rsync-opt=-e \
                    --rsync-opt='ssh -i ${KEY_FILE} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
                """
            }
        }

        stage("Provision") {
            sh "cp RPM-GPG-* /etc/pki/rpm-gpg/"
            sh "make repo-refresh"
        }

        def last_build_version, force_nocache
        stage("Check for Changes") {
            sh "rm -f $WORKSPACE/build.stamp"
            sh "coreos-assembler --dry-run --repo=${repo} --touch-if-changed=$WORKSPACE/build.stamp ${manifest}"
            last_build_version = utils.get_rev_version(repo, ref)
            if (fileExists('force-nocache-build')) {
                force_nocache = readFile('force-nocache-build').trim();
            }
        }

        if (!fileExists('build.stamp') && last_build_version != force_nocache) {
            echo "No changes."
            currentBuild.result = 'SUCCESS'
            currentBuild.description = '(No changes)'
            return
        }

        stage("Compose Tree") {
            sh "coreos-assembler --repo=${repo} ${manifest}"
            sh "ostree --repo=${repo} rev-parse ${ref} > commit.txt"
            def commit = readFile('commit.txt').trim();
            version = utils.get_rev_version("${repo}", commit)
            currentBuild.description = 'ðŸ†• ${version} (commit ${commit})';
            sh "rpm-ostree --repo=${repo} db diff ${commit}^ ${commit}"
        }

        if (params.DRY_RUN) {
            echo "DRY_RUN set, skipping push"
            currentBuild.result = 'SUCCESS'
            currentBuild.description = '(dry run)'
            return
        }

        stage("Sync Out") {
            withCredentials([
                string(credentialsId: params.ARTIFACT_SERVER, variable: 'ARTIFACT_SERVER'),
                sshUserPrivateKey(credentialsId: params.ARTIFACT_SSH_CREDS_ID, keyFileVariable: 'KEY_FILE'),
            ]) {
                sh """
                    ostree prune --repo=${repo} --keep-younger-than='5 days ago' --refs-only
                    ostree summary --repo=${repo} --update
                    /usr/app/ostree-releng-scripts/rsync-repos \
                    --dest ${ARTIFACT_SERVER}:${repo}/ --src=${repo} \
                    --rsync-opt=--stats --rsync-opt=-e \
                    --rsync-opt='ssh -i ${KEY_FILE} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
                """
            }
        }

        build("coreos-rhcos-cloud")
    }
}
