def TIMER = "H/30 * * * *"
def NODE = "rhcos-jenkins"

// this var conveniently refers to a location on the server as well as the
// local dir we sync to/from
def rdgo = "/srv/rhcos/output/rdgo"

node(NODE) {
    def par_stages = [:]
    stage("Clean workspace") {
       step([$class: 'WsCleanup'])
    }
    checkout scm
    utils = load("pipeline-utils.groovy")
    utils.define_properties(TIMER)

    try {
    utils.inside_assembler_container("-v /srv:/srv") {
        stage("Provision") {
            sh """
                if [ ! -d ${rdgo} ]; then
                    mkdir -p ${rdgo}
                fi
                cp RPM-GPG-* /etc/pki/rpm-gpg/
            """
        }

        stage("Sync In") {
            withCredentials([
                string(credentialsId: params.ARTIFACT_SERVER, variable: 'ARTIFACT_SERVER'),
                sshUserPrivateKey(credentialsId: params.ARTIFACT_SSH_CREDS_ID, keyFileVariable: 'KEY_FILE'),
            ]) {
                utils.rsync_dir_in(ARTIFACT_SERVER, KEY_FILE, rdgo)
            }
        }

        stage("Setup and Initialize RDGO") {
            sh """
                rm -f rdgo.stamp
                ln -sf ${WORKSPACE}/rdgo/overlay.yml ${rdgo}/
                cd ${rdgo}
                rpmdistro-gitoverlay init
            """
        }

        stage("Resolve and Fetch Sources") {
            sh "cd ${rdgo} && rpmdistro-gitoverlay resolve --fetch-all"
        }

        stage("Build Overlay Packages") {
            sh "cd ${rdgo} && rpmdistro-gitoverlay build --touch-if-changed ${WORKSPACE}/rdgo.stamp --logdir=${WORKSPACE}/log"
        }

        if (!fileExists("rdgo.stamp")) {
            currentBuild.result = 'SUCCESS'
            currentBuild.description = '(No changes)'
            return
        }

        if (params.DRY_RUN) {
            echo "DRY_RUN set, skipping push"
            currentBuild.result = 'SUCCESS'
            currentBuild.description = '(dry run)'
            return
        }

        stage("Sync Out") {
            withCredentials([
                string(credentialsId: params.ARTIFACT_SERVER, variable: 'ARTIFACT_SERVER'),
                sshUserPrivateKey(credentialsId: params.ARTIFACT_SSH_CREDS_ID, keyFileVariable: 'KEY_FILE'),
            ]) {
                // don't sync overlay.yml symlink since it won't resolve
                sh "rm -f ${rdgo}/overlay.yml"
                utils.rsync_dir_out(ARTIFACT_SERVER, KEY_FILE, rdgo)
            }
            currentBuild.description = 'rdgo build+sync done'
        }

        build job: 'coreos-rhcos-treecompose', wait: false
    }

    } finally {
        archiveArtifacts artifacts: "log/**", allowEmptyArchive: true
    }
}

