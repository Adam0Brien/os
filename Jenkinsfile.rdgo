def DOCKER_IMG = "registry.fedoraproject.org/fedora:28"
def DOCKER_ARGS = "--net=host -v /srv:/srv --privileged"

// this var conveniently refers to a location on the server as well as the local dir we sync to/from
def rdgo = "${env.ARTIFACT_SERVER_DIR}/rdgo"
node(env.NODE) {
    checkout scm
    utils = load("pipeline-utils.groovy")

    try {
    docker.image(DOCKER_IMG).inside(DOCKER_ARGS) {
        stage("Provision") {
            sh """
                dnf install -y git rsync openssh-clients dnf-plugins-core fedpkg dnf-utils awscli
                cp RPM-GPG-* /etc/pki/rpm-gpg/
                dnf copr -y enable walters/buildtools-fedora
                dnf install -y rpmdistro-gitoverlay
            """
        }

        stage("Sync In") {
            withCredentials([sshUserPrivateKey(credentialsId: env['ARTIFACT_SSH_CREDS_ID'],
                                               keyFileVariable: 'KEY_FILE')]) {
                utils.rsync_dir_in(env.ARTIFACT_SERVER, env.KEY_FILE, rdgo)
            }
        }

        stage("Setup and Initialize RDGO") {
            sh """
                rm -f rdgo.stamp
                ln -sf $WORKSPACE/overlay.yml ${rdgo}/
                cd ${rdgo}
                rpmdistro-gitoverlay init
            """
        }

        stage("Resolve and Fetch Sources") {
            sh "cd ${rdgo} && rpmdistro-gitoverlay resolve --fetch-all"
        }

        stage("Build Overlay Packages") {
            sh "cd ${rdgo} && rpmdistro-gitoverlay build --touch-if-changed $WORKSPACE/rdgo.stamp --logdir=${WORKSPACE}/log"
        }

        if (!fileExists("rdgo.stamp")) {
            currentBuild.result = 'SUCCESS'
            currentBuild.description = '(No changes)'
            return
        }

        stage("Sync Out") {
            withCredentials([sshUserPrivateKey(credentialsId: env['ARTIFACT_SSH_CREDS_ID'],
                                               keyFileVariable: 'KEY_FILE')]) {
                utils.rsync_dir_out(env.ARTIFACT_SERVER, env.KEY_FILE, rdgo)
            }
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                              credentialsId: env['AWS_CREDENTIALS']]]) {
                sh """
                    aws s3 sync --delete ${rdgo}/build/ s3://aos-ci/rhcos/rdgo
                """
            }
            currentBuild.description = 'rdgo build+sync done'
        }
    }

    } finally {
        archiveArtifacts artifacts: "log/**", allowEmptyArchive: true
    }
}

