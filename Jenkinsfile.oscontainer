def TIMER = "H/30 * * * *"
def NODE = "atomic-jslave-autobrew"
def DOCKER_IMG = "quay.io/cgwalters/coreos-assembler"
// Turns out the Jenkins docker stuff totally breaks with SELinux
def DOCKER_ARGS = "--privileged"

node(NODE) {
    docker.image(DOCKER_IMG).pull()

    checkout scm
    utils = load("pipeline-utils.groovy")
    utils.define_properties(TIMER)

    stage("Prepare Dockerfile") {
        docker.image(DOCKER_IMG).inside(DOCKER_ARGS) {
            withCredentials([
                string(credentialsId: params.OSTREE_INSTALL_URL, variable: 'OSTREE_INSTALL_URL'),
            ]) {
                sh "sed -e 's,@OSTREE_REPO_URL@,${OSTREE_INSTALL_URL},' < Dockerfile.rollup.in > Dockerfile.rollup"
            }
        }
    }

    withCredentials([
        usernameColonPassword(credentialsId: params.REGISTRY_CREDENTIALS, variable: 'CREDS'),
    ]) {
        def (username, password) = "${CREDS}".split(':')
        sh """set +x
              echo docker login -e 'unused@example.com' -u 'username' -p password registry.svc.ci.openshift.org
              docker login -e 'unused@example.com' -u "${username}" -p "${password}" registry.svc.ci.openshift.org
              echo "login done" """
        docker.withRegistry("https://registry.svc.ci.openshift.org") {
            def img;
            stage("Build container") {
               img = docker.build("registry.svc.ci.openshift.org/rhcos/os:latest", "--no-cache -f Dockerfile.rollup .")
            }
            if (params.DRY_RUN) {
                echo "DRY_RUN set, skipping push"
                currentBuild.result = 'SUCCESS'
                currentBuild.description = '(dry run)'
                return
            }
            stage("Push container") {
                img.push()
            }
        }
    }
}
