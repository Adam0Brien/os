def TIMER = "H/30 * * * *"
def NODE = "rhcos-jenkins"

def dirs_to_backup = ["rdgo", "images" ];

node(NODE) {
    def par_stages = [:]
    stage("Clean workspace") {
       step([$class: 'WsCleanup'])
    }
    checkout scm
    utils = load("pipeline-utils.groovy")
    utils.define_properties(TIMER)

    for (dir in dirs_to_backup) {
        // Avoid iteration+closure trap
        def basetarget = dir;
        par_stages["backup-" + basetarget] = { -> stage("Backup " + basetarget) {
    utils.inside_assembler_container("") {
        def remote = "/srv/rhcos/output/${basetarget}";
        def local = "${WORKSPACE}/${basetarget}";
        stage("Sync In") {
            withCredentials([
                string(credentialsId: params.ARTIFACT_SERVER, variable: 'ARTIFACT_SERVER'),
                sshUserPrivateKey(credentialsId: params.ARTIFACT_SSH_CREDS_ID, keyFileVariable: 'KEY_FILE'),
            ]) {
                sh "mkdir -p ${local}"
                utils.rsync_dir_in_dest(ARTIFACT_SERVER, KEY_FILE, remote, local)
            }
        }

        stage("Sync Out") {
            withCredentials([
                [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: params.AWS_CREDENTIALS],
            ]) {
                sh "aws s3 sync --delete ${local}/ s3://rhcos/${basetarget}"
            }
        }
    }
    } } }

    // Execute
    parallel par_stages; par_stages = [:]
}

