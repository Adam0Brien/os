#!/usr/bin/python3 -u
# Copy an AMI to multiple regions, generating an "AMI JSON"
# file matching the Container Linux schema:
# https://alpha.release.core-os.net/amd64-usr/current/coreos_production_ami_all.json
# Note this assumes the images are HVM.
# The images are also made public.

import os,sys,argparse,subprocess,io,time,re,multiprocessing
import tempfile, json, collections

AMI = collections.namedtuple('AMI', ['region', 'iid'])

def fatal(msg):
    print('error: {}'.format(msg), file=sys.stderr)
    raise SystemExit(1)

def csv_list(string):
   return string.split(',')

parser = argparse.ArgumentParser()
parser.add_argument("--source-region", help="Source region",
                    action='store', required=True)
parser.add_argument("--source-image-id", help="Source AMI",
                    action='store', required=True)
parser.add_argument("--name", help="AMI name",
                    action='store', required=True)
# These could be repeated args, but I find the comma-separated to be far less
# verbose.
parser.add_argument("--copy-tags", help="Copy the given tags (comma separated)",
                    action='store', type=csv_list)
parser.add_argument("--regions", help="Upload to regions (comma separated)",
                    action='store', required=True,
                    type=csv_list)
parser.add_argument("--out", help="Store output in FILE",
                    action='store', metavar='FILE',
                    required=True)

args = parser.parse_args()

# So...we could use an API, but it'd (probably) add a huge new dependency, and
# right now the low-tech aspect of this is OK.
def runaws(args):
    return json.loads(subprocess.check_output(['aws', '--output', 'json'] + args))

# Gather tags to copy from the source AMI
tags_to_copy = []
if len(args.copy_tags) > 0:
    res = runaws(['ec2', 'describe-tags', '--filters',
                  'Name=resource-id,Values={}'.format(args.source_image_id)])
    current_tags = {}
    for tag in res['Tags']:
        key = tag['Key']
        current_tags[tag['Key']] = tag['Value']
    tags_to_copy = []
    for tag in args.copy_tags:
        val = current_tags.get(tag)
        if val is None:
            fatal("ami-{} is missing tag: {}".format(args.source_image_id, tag))
        tags_to_copy.append("Key={},Value={}".format(tag, val))
    print("Tags to copy: {}".format(tags_to_copy))

# Upload to all the regions
amis = []
for region in args.regions:
    print("Uploading to: {}".format(region))
    res = runaws(['ec2', 'copy-image', '--source-region', args.source_region,
                  '--source-image-id', args.source_image_id,
                  '--name', args.name, '--region', region])
    iid = res['ImageId']
    print("Complete, ImageId={}".format(iid))

    print("Copying tags...")
    subprocess.check_call(['aws', 'ec2', 'create-tags', '--region', region,
                           '--resources', iid, '--tags'] + tags_to_copy)
    amis.append(AMI(region, iid))

def wait_image(ami, dry_run=False):
    args = ['aws', 'ec2', '--region', ami.region,
            'wait', 'image-available']
    if dry_run:
        args.append('--dry-run')
    args.extend(['--image-id', ami.iid])
    if dry_run:
        output = subprocess.run(args, stderr=subprocess.PIPE)
        # WTF, why does --dry-run exit with an error code if it would
        # have succeeded?  And there's apparently no structured error
        # output from the CLI.
        if not b'Request would have succeeded' in output.stderr:
            raise SystemExit("wait_image failed")
    else:
        return subprocess.call(args) == 0

print("Using modify-image-attribute to make AMIs public (may take a while)")
amis_succeeded = set()
# Try waiting for each AMI twice; if we were close to the timeout
# this could take a long time, but in practice EC2 parallelizes
# so this way we avoid failing if the first image or two happens
# to take too long.
for _ in range(2):
    for ami in amis:
        # First use --dry-run to ensure that we have permissions
        wait_image(ami, dry_run=True)
        print("Waiting on {}".format(ami))
        if wait_image(ami):
            subprocess.check_call(['aws', 'ec2', '--region',
                                   ami.region, 'modify-image-attribute',
                                   '--image-id', ami.iid,
                                   '--launch-permission', '{"Add":[{"Group":"all"}]}'])
            print("AMI is now public: {}".format(ami))
            amis_succeeded.add(ami)
for ami in amis:
    if ami not in amis_succeeded:
        print("Failed to await: {}".format(ami))

# Write our output JSON
ami_json = []
for ami in amis:
    ami_json.append({'name': ami.region,
                     'hvm': ami.iid})
# Be consistent
ami_json.sort(key=lambda x: x['name'])
with open(args.out, 'w') as f:
    json.dump({'amis': ami_json}, f)
